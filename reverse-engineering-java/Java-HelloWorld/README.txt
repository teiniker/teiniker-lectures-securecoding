Compiling and Running a Simple Java Program
-------------------------------------------------------------------------------

Write the source code
---------------------

package org.se.lab;

public class HelloWorld
{
	public static void main(String... args)
	{
		for(int i=0; i<10; i++)
		{
			System.out.println("Hello KBerg!");
		}
	}
}

Compile and run the executable
------------------------------
$ mkdir target
$ mkdir target/classes

$ javac -d target/classes src/main/java/org/se/lab/*.java

$ tree

.
├── README.txt
├── src
│    └── main
│        └── java
│             └── org
│                └── se
│                    └── lab
│                        └── HelloWorld.java
└── target
    └── classes
        └── org
            └── se
                └── lab
                    └── HelloWorld.class


$ java -cp target/classes/ org.se.lab.HelloWorld
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!
Hello KBerg!


Use a build tool
----------------

$ mvn compile

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.se.lab</groupId>
	<artifactId>Java-HelloWorld</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>


Review the generated Bytecode
-----------------------------

$ javap -cp target/classes -c org.se.lab.HelloWorld

  Compiled from "HelloWorld.java"
  public class org.se.lab.HelloWorld {
    public org.se.lab.HelloWorld();
      Code:
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return

    public static void main(java.lang.String...);
      Code:
         0: iconst_0
         1: istore_1
         2: iload_1
         3: bipush        10
         5: if_icmpge     22
         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
        11: ldc           #3                  // String Hello KBerg!
        13: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        16: iinc          1, 1
        19: goto          2
        22: return
  }


Build a library
---------------

$ mvn package
.
├── pom.xml
├── src
│    └── main
│        └── java
│            └── org
│                └── se
│                    └── lab
│                        └── HelloWorld.java
└── target
    ├── classes
    │    └── org
    │        └── se
    │            └── lab
    │                └── HelloWorld.class
    ├── Java-HelloWorld-0.0.1-SNAPSHOT.jar


$ jar -tf target/Java-HelloWorld-0.0.1-SNAPSHOT.jar
  META-INF/
  META-INF/MANIFEST.MF
  org/
  org/se/
  org/se/lab/
  org/se/lab/HelloWorld.class
  META-INF/maven/
  META-INF/maven/org.se.lab/
  META-INF/maven/org.se.lab/Java-HelloWorld/
  META-INF/maven/org.se.lab/Java-HelloWorld/pom.xml
  META-INF/maven/org.se.lab/Java-HelloWorld/pom.properties


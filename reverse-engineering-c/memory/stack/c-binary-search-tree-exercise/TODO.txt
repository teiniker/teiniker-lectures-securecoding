Exercise: C Memory Management - Search Tree
-------------------------------------------------------------------------------

For the functions declared in the given "search tree.h" file, write the 
implementation in the corresponding "search tree.c" file.

A) node_t *tree_insert(node_t *node_ptr, int value, comparator_t cmp)
	Insert a node in an ordered way (comp() < 0 => left; else right)
	into the existing tree.

B) node_t *tree_search(node_t *node_ptr, int value, comparator_t cmp)
	Find a node in the ordered tree (comp() < 0 => left; else right)
	and return the found node.

C) void tree_delete(node_t *node_ptr)
	Remove all nodes from memory.

Verify your implementations with the "search_tree_test" which can 
be built and executed with a single command:
$ make

Ensure that all memory blocks will be released. 
Use valgrind to ensure that no memory leaks are possible.

